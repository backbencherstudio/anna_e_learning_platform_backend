generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseVisibility {
  DRAFT
  PRIVATE
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  VIDEO
  ARTICLE
  QUIZ
  ASSIGNMENT
  LIVE
  OTHER
}

enum QuizAttemptStatus {
  IN_PROGRESS
  SUBMITTED
  GRADED
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  RETURNED
  GRADED
}

model Account {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at  DateTime?
  availability String?

  email      String? @unique
  username   String? @unique
  name       String? @db.VarChar(255)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  password   String? @db.VarChar(255)
  domain     String? @unique
  avatar     String?

  phone_number  String?
  country       String?
  state         String?
  city          String?
  address       String?
  zip_code      String?
  gender        String?
  date_of_birth DateTime? @db.Date

  // billing id. e.g. stripe customer id
  billing_id String?

  type              String?   @default("user")
  email_verified_at DateTime?

  is_two_factor_enabled Int?    @default(0)
  two_factor_secret     String? // secret key for two factor authentication

  accounts                  Account[]
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")

  user_payment_methods   UserPaymentMethod[]
  user_settings          UserSetting[]
  ucodes                 Ucode[]
  roles                  Role[]
  role_users             RoleUser[]
  payment_transactions   PaymentTransaction[]
  quiz_attempts          QuizAttempt[]
  assignment_submissions AssignmentSubmission[]
  graded_submissions     AssignmentSubmission[] @relation("SubmissionGrader")
  enrollments            Enrollment[]
  user_progress          UserProgress[]
  certificates           Certificate[]

  @@map("users")
}

model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  token      String?
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  title  String?
  name   String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  title      String?
  action     String?
  subject    String?
  conditions String?
  fields     String?

  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// this table stores notification event
model NotificationEvent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  type   String?
  text   String?

  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  read_at DateTime?

  status Int? @default(1) @db.SmallInt

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  notification_event_id String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  entity_id String?

  @@map("notifications")
}

model UserPaymentMethod {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  payment_method_id String?
  checkout_id       String?

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  store_id String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  order_id         String?
  type             String?  @default("order")
  withdraw_via     String?  @default("wallet")
  provider         String?
  reference_number String?
  status           String?  @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?

  @@map("payment_transactions")
}

// ---------Start Chat schema---------

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

// message is used for conversation
model Message {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status MessageStatus? @default(PENDING)

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  conversation_id String?
  conversation    Conversation? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  attachment_id String?
  attachment    Attachment? @relation(fields: [attachment_id], references: [id])

  message String?

  @@map("messages")
}

// this table stores attachment of message
model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name     String?
  type     String?
  size     Int?
  file     String?
  file_alt String?

  messages Message[]

  @@map("attachments")
}

// this table stores conversation
model Conversation {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  creator_id String?
  creator    User?   @relation("creator", fields: [creator_id], references: [id])

  participant_id String?
  participant    User?   @relation("participant", fields: [participant_id], references: [id])

  messages Message[]

  @@map("conversations")
}

// ---------End Chat schema---------

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  category      String?
  label         String?
  description   String?
  key           String? @unique
  default_value String?

  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  setting_id String?
  setting    Setting? @relation(fields: [setting_id], references: [id])

  value String?

  @@map("user_settings")
}

// this table stores example
// model Note {
//   id                String  @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1) @db.SmallInt

//   title String?
//   body  String? @db.Text

//   tenant_id Int?
//   tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
//   @@map("posts")
// }

// ---------- Languages ----------
model Language {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  name String
  code String @unique

  courses Course[]

  @@map("languages")
}

// ---------- Content ----------
model Course {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  title         String
  slug          String           @unique
  summary       String?
  description   String?
  visibility    CourseVisibility @default(DRAFT)
  estimated_min Int?
  start_date    DateTime?
  end_date      DateTime?
  thumbnail     String?
  metadata      Json?
  price         Decimal?

  language_id String?
  language    Language? @relation(fields: [language_id], references: [id])

  sections      CourseSection[]
  lessons       Lesson[]
  media         MediaAsset[]
  quizzes       Quiz[]
  assignments   Assignment[]
  enrollments   Enrollment[]
  user_progress UserProgress[]
  certificates  Certificate[]

  @@map("courses")
}

model CourseSection {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  course_id String
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  title    String
  position Int    @default(0)

  lessons Lesson[]

  @@index([course_id, position])
  @@map("course_sections")
}

model Lesson {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  course_id    String
  section_id   String?
  title        String
  slug         String
  type         LessonType @default(VIDEO)
  content      Json?
  duration_sec Int?
  position     Int        @default(0)
  metadata     Json?

  course  Course         @relation(fields: [course_id], references: [id], onDelete: Cascade)
  section CourseSection? @relation(fields: [section_id], references: [id], onDelete: SetNull)

  media         MediaAsset[]
  quizzes       Quiz[]
  assignments   Assignment[]
  user_progress UserProgress[]

  @@unique([course_id, slug])
  @@index([course_id, position])
  @@map("lessons")
}

model MediaAsset {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  course_id String?
  lesson_id String?
  url       String
  kind      String  @default("video") // "image","video","pdf","slides"
  alt       String?
  position  Int     @default(0)

  course Course? @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lesson Lesson? @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@index([course_id])
  @@index([lesson_id])
  @@map("media_assets")
}

// ---------- Assessment: Quiz ----------
model Quiz {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  course_id    String
  lesson_id    String?
  title        String
  instructions String?
  total_marks  Int     @default(0)

  due_at       DateTime?
  is_published Boolean   @default(false)
  published_at DateTime?
  metadata     Json?

  course    Course         @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lesson    Lesson?        @relation(fields: [lesson_id], references: [id], onDelete: SetNull)
  questions QuizQuestion[]
  attempts  QuizAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  quiz_id  String
  prompt   String
  points   Int    @default(1)
  position Int    @default(0)

  // single correct option (dropdown)
  correct_option_id String?
  correct_option    QuizQuestionOption? @relation("QuestionCorrectOption", fields: [correct_option_id], references: [id])

  quiz    Quiz                 @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  options QuizQuestionOption[] @relation("QuestionOptions")
  answers QuizAnswer[]

  @@index([quiz_id, position])
  @@map("quiz_questions")
}

model QuizQuestionOption {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  question_id String
  question    QuizQuestion   @relation("QuestionOptions", fields: [question_id], references: [id], onDelete: Cascade)
  correct_for QuizQuestion[] @relation("QuestionCorrectOption")
  selected_in QuizAnswer[]

  option   String
  position Int    @default(0) // determines A/B/C… label

  @@unique([question_id, position])
  @@index([question_id, position])
  @@map("quiz_question_options")
}

model QuizAttempt {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  quiz_id      String
  user_id      String
  status       QuizAttemptStatus @default(IN_PROGRESS)
  score        Int               @default(0)
  started_at   DateTime          @default(now())
  submitted_at DateTime?

  quiz    Quiz         @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  answers QuizAnswer[]

  @@index([user_id, quiz_id])
  @@map("quiz_attempts")
}

model QuizAnswer {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  attempt_id         String
  question_id        String
  selected_option_id String

  correct       Boolean
  marks_awarded Int     @default(0)

  attempt         QuizAttempt        @relation(fields: [attempt_id], references: [id], onDelete: Cascade)
  question        QuizQuestion       @relation(fields: [question_id], references: [id], onDelete: Cascade)
  selected_option QuizQuestionOption @relation(fields: [selected_option_id], references: [id], onDelete: Cascade)

  @@unique([attempt_id, question_id]) // one answer per question per attempt
  @@map("quiz_answers")
}

// ---------- Assessment: Assignment (Essay) ----------
model Assignment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  course_id   String
  lesson_id   String?
  title       String?
  description String?

  due_at       DateTime?
  is_published Boolean   @default(false)
  published_at DateTime?

  course      Course                 @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lesson      Lesson?                @relation(fields: [lesson_id], references: [id], onDelete: SetNull)
  questions   AssignmentQuestion[]
  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentQuestion {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  assignment_id String
  title         String
  points        Int    @default(0)
  position      Int    @default(0)

  assignment Assignment         @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  answers    AssignmentAnswer[]

  @@index([assignment_id, position])
  @@map("assignment_questions")
}

model AssignmentSubmission {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  assignment_id    String
  user_id          String
  status           SubmissionStatus @default(DRAFT)
  total_marks      Int              @default(0)
  overall_feedback String?
  graded_by_id     String?
  graded_at        DateTime?

  assignment Assignment             @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  learner    User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  graded_by  User?                  @relation("SubmissionGrader", fields: [graded_by_id], references: [id], onDelete: SetNull)
  answers    AssignmentAnswer[]
  files      SubmissionAttachment[]

  @@unique([assignment_id, user_id]) // one submission per learner
  @@index([assignment_id, status])
  @@map("assignment_submissions")
}

model AssignmentAnswer {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  submission_id String
  question_id   String
  answer_text   String? @db.Text
  marks_awarded Int     @default(0)
  feedback      String?

  submission AssignmentSubmission @relation(fields: [submission_id], references: [id], onDelete: Cascade)
  question   AssignmentQuestion   @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@unique([submission_id, question_id])
  @@map("assignment_answers")
}

model SubmissionAttachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  submission_id String
  url           String
  name          String?

  submission AssignmentSubmission @relation(fields: [submission_id], references: [id], onDelete: Cascade)

  @@map("submission_attachments")
}

// ===== ENROLLMENT & PROGRESS =====
enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

model Enrollment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id   String
  course_id String

  status       EnrollmentStatus @default(ACTIVE)
  enrolled_at  DateTime         @default(now())
  completed_at DateTime?
  expires_at   DateTime?

  // Progress tracking
  progress_percentage Int       @default(0)
  last_accessed_at    DateTime?

  // Relations
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id])
  @@map("enrollments")
}

model UserProgress {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id   String
  course_id String
  lesson_id String?

  // Progress
  is_completed  Boolean   @default(false)
  completed_at  DateTime?
  time_spent    Int? // Time spent in seconds
  last_position Int? // Video/audio position

  // Relations
  user   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lesson Lesson? @relation(fields: [lesson_id], references: [id], onDelete: SetNull)

  @@unique([user_id, course_id, lesson_id])
  @@map("user_progress")
}

// ===== CERTIFICATES =====
model Certificate {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id   String
  course_id String

  // Certificate Details
  certificate_number String    @unique
  issued_at          DateTime  @default(now())
  expires_at         DateTime?

  // Relations
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id])
  @@map("certificates")
}
